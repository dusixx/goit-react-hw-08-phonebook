{"version":3,"file":"static/js/554.2a245447.chunk.js","mappings":"0UAyBaA,EAAgB,WAC3B,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,MAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACMC,GAAeC,EAAAA,EAAAA,QAAO,MAC5B,GAOIC,EAAAA,EAAAA,eANFC,EADF,EACEA,MACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,YACAC,EAJF,EAIEA,cACAC,EALF,EAKEA,gBACAC,EANF,EAMEA,kBAGFC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLJ,EAAY,MACZN,EAAc,KACf,CACF,GAAE,CAACM,KAEJI,EAAAA,EAAAA,YAAU,WACHf,GAASE,IACZS,EAAY,MACZN,EAAc,MAEjB,GAAE,CAACL,EAAME,EAAQS,KAElBI,EAAAA,EAAAA,YAAU,WAAO,IAAD,IACRC,EAAQP,EAAMQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAOT,CAAf,IACvBM,IAELX,EAAcW,GACdf,EAAQe,EAAMhB,MACdG,EAAUa,EAAMd,QAEhB,UAAAI,EAAac,eAAb,SAAsBC,QACtB,UAAAf,EAAac,eAAb,SAAsBE,iBACvB,GAAE,CAACZ,EAAUD,EAAOE,IAErB,IAAMY,EAAY,SAAAC,GAChBvB,EAAQ,IACRE,EAAU,GACX,EAoCD,OACE,SAAC,EAAAsB,MAAD,CAAOC,MAAO,CAAEC,QAAS,QAAzB,UACE,UAAC,EAAAC,KAAD,CAAMC,SAjBW,SAAAL,GACnBA,EAAEM,iBAEF,IAAMC,EAAO,CACX/B,MAAMgC,EAAAA,EAAAA,YAAWhC,GACjBE,QAAQ+B,EAAAA,EAAAA,cAAa/B,IAGvB,OAAIQ,EApBc,SAAAqB,IACdG,EAAAA,EAAAA,iBAAgBH,EAAM3B,IAE1BU,EAAiB,CAAEK,GAAIT,EAAUqB,KAAAA,IAC9BI,MAAK,WACJxB,EAAY,MACZY,IACAa,EAAAA,GAAAA,QAjEa,wCAkEd,IACAC,MAAMD,EAAAA,GAAAA,MACV,CAUsBE,CAAYP,IAG5BQ,EAAAA,EAAAA,iBAAgB9B,EAAOsB,QAC5BK,EAAAA,GAAAA,MApFgB,2DAqDC,SAAAL,GACjBlB,EAAgBkB,GAAMI,MAAK,WACzBZ,IACAa,EAAAA,GAAAA,QAvDa,sCAwDd,GACF,CAyB2CI,CAAWT,EAEtD,EAIG,WACE,SAAC,EAAAU,UAAD,CACEC,IAAKpC,EACLN,KAAK,OACL2C,YAAY,OACZC,OAAO,sBACPC,aAAa,MACbC,QAASC,EAAAA,UAAAA,KAAAA,QACTC,MAAOD,EAAAA,UAAAA,KAAAA,MACPE,KAAMF,EAAAA,UAAAA,KAAAA,KACNG,MAAOlD,EACPmD,SAAU,SAAA3B,GAAC,aAAIvB,EAAO,iBAACuB,QAAD,IAACA,OAAD,EAACA,EAAG4B,OAAOF,aAAX,QAAoB,GAA/B,EACXG,UAAQ,KAGV,SAAC,EAAAZ,UAAD,CACEzC,KAAK,SACL2C,YAAY,SACZC,OAAO,sBACPU,KAAK,MACLT,aAAa,MACbC,QAASC,EAAAA,UAAAA,OAAAA,QACTC,MAAOD,EAAAA,UAAAA,OAAAA,MACPE,KAAMF,EAAAA,UAAAA,OAAAA,KACNG,MAAOhD,EACPiD,SAAU,SAAA3B,GAAC,aAAIrB,EAAS,iBAACqB,QAAD,IAACA,OAAD,EAACA,EAAG4B,OAAOF,aAAX,QAAoB,GAAjC,EACXG,UAAQ,KAGV,SAAC,EAAAE,UAAD,CACEC,QAAS,cAAcC,KAAK7C,GAC5B8C,QAAShD,QAKlB,C,kIC3IYkB,EAAO+B,EAAAA,EAAAA,KAAH,sLAWJC,GAASD,EAAAA,EAAAA,GAAOE,EAAAA,cAAPF,CAAH,qG,gHCTNJ,EAAY,SAAC,GAAwC,IAAD,IAArCC,QAAAA,OAAqC,aAApBE,OACrCI,OADyD,UAI7D,iCACE,SAAC,EAAAC,aAAD,CAAcC,KAAK,SAAS,SAH9B,OAQF,OACE,SAAC,EAAAJ,OAAD,CAAQN,KAAK,SAAb,SACGE,GAAU,SAAC,EAAAS,aAAD,CAAcC,MAAO,GAAIC,YAAY,UAAaL,GAGlE,C,oOClBYG,EAAe,SAAC,GAAD,QAAGC,MAAAA,OAAH,MAAW,GAAX,EAAkBE,GAAlB,mBAC1B,SAAC,MAAD,QACED,YAAY,QACZE,YAAY,IACZC,kBAAkB,OAClBJ,MAAOA,EACPK,SAAS,GACLH,GAPoB,C,2LCUf3B,GAAY+B,EAAAA,EAAAA,aACvB,WAEE9B,GACI,IAFFQ,EAEC,EAFDA,MAAauB,EAEZ,EAFMxB,KAAiBK,EAEvB,EAFuBA,KAAMH,EAE7B,EAF6BA,SAAUP,EAEvC,EAFuCA,OAAQsB,EAE/C,EAF+CA,MAAUE,GAEzD,YACH,OACE,SAAC,EAAAM,MAAD,CAAO9B,OAAQA,EAAQsB,MAAOA,EAA9B,UACE,UAAC,EAAAS,aAAD,YACE,SAAC,EAAAC,OAAD,QACElC,IAAKA,EACLY,KAAMA,GAAQ,OACdH,SAAUA,EACVD,MAAOA,GACHkB,IAGLK,IACC,SAAC,EAAAI,YAAD,UACwB,oBAAdJ,GACN,SAACA,EAAD,CAAWT,KAAK,SAEhBS,IAKLvB,IACC,SAAC,EAAA4B,SAAD,CAAUxB,KAAK,SAASyB,QAAS,kBAAM5B,EAAS,KAAf,EAAjC,UACE,SAAC,EAAA6B,UAAD,CAAWhB,KAAK,eAM3B,G,yOC3CUU,EAAQf,EAAAA,EAAAA,MAAH,uDACP,qBAAGO,OAAqB,MAAxB,IACC,qBAAGtB,QAAuB,MAA1B,IAGC+B,EAAehB,EAAAA,EAAAA,IAAH,wJAMb,qBAAGf,QAAuB,MAA1B,IAICgC,EAAQjB,EAAAA,EAAAA,MAAH,wkBAKC,qBAAGsB,cAAmC,MAAtC,IACD,qBAAGC,aAAiC,MAApC,IAUdC,EAAAA,EAAAA,gBAAe,2CAcNL,GAAWnB,EAAAA,EAAAA,GAAOyB,EAAAA,WAAPzB,CAAH,uQAkBRkB,EAAclB,EAAAA,EAAAA,KAAH,+JACpB0B,EAAAA,EAAAA,gB,gLCjEStC,EAAY,CACvB/C,KAAM,CACJgD,MACE,4FACFF,QACE,0KACFG,KAAMqC,EAAAA,UAGRpF,OAAQ,CACN8C,MACE,uEACFF,QAAS,4BACTG,KAAMsC,EAAAA,W","sources":["components/ContactEditor/ContactEditor.jsx","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/SubmitBtn.jsx","components/SpinnerLines/SpinnerLines.jsx","components/TextField/TextField.jsx","components/TextField/TextField.styled.jsx","data/fieldData.js"],"sourcesContent":["import { useState, useRef } from 'react';\nimport { TextField } from 'components/TextField';\nimport { Form } from './ContactEditor.styled';\nimport { fieldData } from 'data/fieldData';\nimport { useContacts } from 'redux/hooks';\nimport { toast } from 'react-toastify';\nimport { Block } from 'styles/shared';\nimport { useEffect } from 'react';\nimport { SubmitBtn } from './SubmitBtn';\n\nimport {\n  formatNumber,\n  formatName,\n  isContactExists,\n  isContactsEqual,\n} from 'utils';\n\nconst ALREADY_EXISTS = `The contact with the same name or number already exists`;\nconst ADDED_SUCCESS = `The contact was successfully added `;\nconst UPDATED_SUCCESS = `The contact was successfully updated `;\n\n//\n// ContactEditor\n//\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [editedData, setEditedData] = useState(null);\n  const nameFieldRef = useRef(null);\n  const {\n    items,\n    editedId,\n    setEditedId,\n    pendingAction,\n    addContactAsync,\n    editContactAsync,\n  } = useContacts();\n\n  useEffect(() => {\n    return () => {\n      setEditedId(null);\n      setEditedData(null);\n    };\n  }, [setEditedId]);\n\n  useEffect(() => {\n    if (!name && !number) {\n      setEditedId(null);\n      setEditedData(null);\n    }\n  }, [name, number, setEditedId]);\n\n  useEffect(() => {\n    const found = items.find(itm => itm.id === editedId);\n    if (!found) return;\n\n    setEditedData(found);\n    setName(found.name);\n    setNumber(found.number);\n\n    nameFieldRef.current?.focus();\n    nameFieldRef.current?.scrollIntoView();\n  }, [editedId, items, setEditedId]);\n\n  const resetForm = e => {\n    setName('');\n    setNumber('');\n  };\n\n  const addContact = data => {\n    addContactAsync(data).then(() => {\n      resetForm();\n      toast.success(ADDED_SUCCESS);\n    });\n  };\n\n  const editContact = data => {\n    if (isContactsEqual(data, editedData)) return;\n\n    editContactAsync({ id: editedId, data })\n      .then(() => {\n        setEditedId(null);\n        resetForm();\n        toast.success(UPDATED_SUCCESS);\n      })\n      .catch(toast.error);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const data = {\n      name: formatName(name),\n      number: formatNumber(number),\n    };\n\n    if (editedId) return editContact(data);\n\n    // можно вынести в condition для thunk-а addContact\n    if (!isContactExists(items, data)) return addContact(data);\n    toast.error(ALREADY_EXISTS);\n  };\n\n  return (\n    <Block style={{ padding: '15px' }}>\n      <Form onSubmit={handleSubmit}>\n        <TextField\n          ref={nameFieldRef}\n          name=\"name\"\n          placeholder=\"name\"\n          height=\"var(--field-height)\"\n          autoComplete=\"off\"\n          pattern={fieldData.name.pattern}\n          title={fieldData.name.title}\n          icon={fieldData.name.icon}\n          value={name}\n          onChange={e => setName(e?.target.value ?? '')}\n          required\n        />\n\n        <TextField\n          name=\"number\"\n          placeholder=\"number\"\n          height=\"var(--field-height)\"\n          type=\"tel\"\n          autoComplete=\"off\"\n          pattern={fieldData.number.pattern}\n          title={fieldData.number.title}\n          icon={fieldData.number.icon}\n          value={number}\n          onChange={e => setNumber(e?.target.value ?? '')}\n          required\n        />\n\n        <SubmitBtn\n          loading={/(add|edit)/i.test(pendingAction)}\n          adding={!editedId}\n        />\n      </Form>\n    </Block>\n  );\n};\n","import styled from '@emotion/styled';\nimport { ButtonPrimary } from 'styles/shared';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const Button = styled(ButtonPrimary)`\n  margin: 0 auto 0 auto;\n  padding: 0;\n  min-width: 80px;\n  height: 35px;\n`;\n","import { bool } from 'prop-types';\nimport { Button } from './ContactEditor.styled';\nimport { SpinnerLines } from 'components/SpinnerLines/SpinnerLines';\nimport { IconUserPlus } from 'styles/icons';\n\nexport const SubmitBtn = ({ loading = false, adding = true }) => {\n  const btnCaption = !adding ? (\n    'Save'\n  ) : (\n    <>\n      <IconUserPlus size=\"20px\" />\n      Add\n    </>\n  );\n\n  return (\n    <Button type=\"submit\">\n      {loading ? <SpinnerLines width={20} strokeColor=\"white\" /> : btnCaption}\n    </Button>\n  );\n};\n\nSubmitBtn.propTypes = {\n  loading: bool,\n  adding: bool,\n};\n","import { RotatingLines } from 'react-loader-spinner';\n\nexport const SpinnerLines = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n","import { forwardRef } from 'react';\nimport { func, string, number, oneOfType } from 'prop-types';\nimport { IconClose } from 'styles/icons';\n\nimport {\n  ClearBtn,\n  InputWrapper,\n  Input,\n  Field,\n  IconWrapper,\n} from './TextField.styled';\n\nexport const TextField = forwardRef(\n  (\n    { value, icon: ReactIcon, type, onChange, height, width, ...restProps },\n    ref /* !! after props */\n  ) => {\n    return (\n      <Field height={height} width={width}>\n        <InputWrapper>\n          <Input\n            ref={ref}\n            type={type || 'text'}\n            onChange={onChange}\n            value={value}\n            {...restProps}\n          />\n\n          {ReactIcon && (\n            <IconWrapper>\n              {typeof ReactIcon === 'function' ? (\n                <ReactIcon size=\"100%\" />\n              ) : (\n                ReactIcon\n              )}\n            </IconWrapper>\n          )}\n\n          {value && (\n            <ClearBtn type=\"button\" onClick={() => onChange(null)}>\n              <IconClose size=\"100%\" />\n            </ClearBtn>\n          )}\n        </InputWrapper>\n      </Field>\n    );\n  }\n);\n\nTextField.propTypes = {\n  value: string,\n  type: string,\n  onChange: func,\n  width: oneOfType([string, number]),\n  height: oneOfType([string, number]),\n};\n","import styled from '@emotion/styled';\nimport { ButtonBase, FlexCentered, TransitionBase } from 'styles/shared';\n\nexport const Field = styled.label`\n  width: ${({ width }) => width || '100%'};\n  height: ${({ height }) => height || '100%'};\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  height: ${({ height }) => height || '100%'};\n  color: var(--color-text);\n`;\n\nexport const Input = styled.input`\n  height: 100%;\n  width: 100%;\n\n  padding: 0;\n  padding-right: ${({ paddingRight }) => paddingRight || '30px'};\n  padding-left: ${({ paddingLeft }) => paddingLeft || '35px'};\n\n  font-family: inherit;\n  font-size: inherit;\n  background-color: white;\n\n  border-radius: var(--border-radius);\n  border: 1px solid var(--color-border);\n  outline: none;\n\n  ${TransitionBase('box-shadow border-color ackground-colo')};\n\n  &::placeholder {\n    opacity: 0.5;\n    text-transform: capitalize;\n  }\n\n  &:focus-visible {\n    background-color: var(--color-accent-lighter);\n    box-shadow: 0 0 0 0.25rem rgb(var(--color-blue-rgb), 0.2);\n    border-color: rgb(var(--color-blue-rgb), 0.6);\n  }\n`;\n\nexport const ClearBtn = styled(ButtonBase)`\n  position: absolute;\n  top: 50%;\n  right: 5px;\n\n  height: 80%;\n  padding: 3px;\n\n  color: gray;\n  transform: translateY(-50%);\n  transition-property: color;\n\n  &:focus-visible,\n  &:hover {\n    color: var(--color-black);\n  }\n`;\n\nexport const IconWrapper = styled.span`\n  ${FlexCentered()};\n\n  position: absolute;\n  top: 50%;\n  left: 10px;\n  height: 60%;\n\n  color: currentColor;\n  transform: translateY(-50%);\n`;\n","import { IconPhone, IconUser } from 'styles/icons';\n\nexport const fieldData = {\n  name: {\n    title:\n      'First and last name(optional) must contain only letters and be at least 2 characters long',\n    pattern:\n      '^\\\\s*[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,}(\\\\s+[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,})?\\\\s*$',\n    icon: IconUser,\n  },\n\n  number: {\n    title:\n      'The number must be 10 digits long and may contain spaces and hyphens',\n    pattern: '^([\\\\s-]*\\\\d[\\\\s-]*){10}$',\n    icon: IconPhone,\n  },\n};\n"],"names":["ContactEditor","useState","name","setName","number","setNumber","editedData","setEditedData","nameFieldRef","useRef","useContacts","items","editedId","setEditedId","pendingAction","addContactAsync","editContactAsync","useEffect","found","find","itm","id","current","focus","scrollIntoView","resetForm","e","Block","style","padding","Form","onSubmit","preventDefault","data","formatName","formatNumber","isContactsEqual","then","toast","catch","editContact","isContactExists","addContact","TextField","ref","placeholder","height","autoComplete","pattern","fieldData","title","icon","value","onChange","target","required","type","SubmitBtn","loading","test","adding","styled","Button","ButtonPrimary","btnCaption","IconUserPlus","size","SpinnerLines","width","strokeColor","restProps","strokeWidth","animationDuration","visible","forwardRef","ReactIcon","Field","InputWrapper","Input","IconWrapper","ClearBtn","onClick","IconClose","paddingRight","paddingLeft","TransitionBase","ButtonBase","FlexCentered","IconUser","IconPhone"],"sourceRoot":""}