{"version":3,"file":"static/js/415.3dafdfc9.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","components/LoginForm/LoginForm.styled.jsx","components/SpinnerLines/SpinnerLines.jsx","components/TextField/TextField.jsx","components/TextField/TextField.styled.jsx","data/fieldData.js","pages/Home.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { fieldData } from 'data/fieldData';\nimport { IconMail } from 'styles/icons';\nimport { useAuth } from 'redux/hooks';\nimport { formatName } from 'utils';\nimport { toast } from 'react-toastify';\nimport { SpinnerLines } from 'components/SpinnerLines/SpinnerLines';\nimport { IoMdEye, IoMdEyeOff } from 'react-icons/io';\n\nimport {\n  Form,\n  FormField,\n  Button,\n  FormTitle,\n  ShowPassword,\n  PasswordField,\n} from './LoginForm.styled';\n\nconst FORM_TITLE_LOGIN = 'Login to your account';\nconst FORM_TITLE_SIGNUP = 'Create your account';\nconst BTN_CAPTION_LOGIN = 'Log In';\nconst BTN_CAPTION_SIGNUP = 'Sign Up';\nconst LOGIN_ERR = 'Invalid email or a user with the same email already exists';\n\nexport const LoginForm = ({ signup = false }) => {\n  const { loginAsync, signupAsync, pendingAction } = useAuth();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n\n  const resetForm = e => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const action = signup ? signupAsync : loginAsync;\n\n    const formData = {\n      name: formatName(name),\n      email: email.trim(),\n      password: password.trim(),\n    };\n\n    action(formData)\n      .then(({ user }) => {\n        toast.success(`Welcome, ${user.name}`);\n        resetForm();\n      })\n      .catch(() => toast.error(LOGIN_ERR));\n  };\n\n  // в режиме login не показываем лишнего\n  const passwordProps = signup\n    ? {\n        minLength: 7,\n        maxLength: 20,\n        pattern: fieldData.password.pattern,\n      }\n    : {};\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormTitle>{signup ? FORM_TITLE_SIGNUP : FORM_TITLE_LOGIN}</FormTitle>\n\n      {signup && (\n        <FormField\n          name=\"name\"\n          placeholder=\"name\"\n          autoComplete=\"off\"\n          pattern={fieldData.name.pattern}\n          title={fieldData.name.title}\n          icon={fieldData.name.icon}\n          value={name}\n          maxLength={35}\n          onChange={e => setName(e?.target.value ?? '')}\n          required\n        />\n      )}\n\n      <FormField\n        placeholder=\"email\"\n        type=\"email\"\n        autoComplete=\"off\"\n        icon={<IconMail size={18} />}\n        value={email}\n        onChange={e => setEmail(e?.target.value ?? '')}\n        required\n      />\n\n      <PasswordField>\n        <FormField\n          {...passwordProps}\n          placeholder=\"password\"\n          type={showPassword ? 'text' : 'password'}\n          autoComplete=\"off\"\n          icon={fieldData.password.icon}\n          title={fieldData.password.title}\n          value={password}\n          onChange={e => setPassword(e?.target.value ?? '')}\n          required\n        />\n\n        <ShowPassword>\n          {showPassword ? <IoMdEye size={15} /> : <IoMdEyeOff size={15} />}\n          <input type=\"checkbox\" onClick={() => setShowPassword(cur => !cur)} />\n          <span>{showPassword ? 'Hide' : 'Show'}</span> password\n        </ShowPassword>\n      </PasswordField>\n\n      <Button>\n        {pendingAction && <SpinnerLines width={20} strokeColor=\"white\" />}\n        {!pendingAction && (signup ? BTN_CAPTION_SIGNUP : BTN_CAPTION_LOGIN)}\n      </Button>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\nimport { TextField } from 'components/TextField';\nimport { ButtonPrimary } from 'styles/shared';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  width: 90%;\n  margin: 0 auto;\n  padding: 15px 20px;\n\n  background-color: white;\n  box-shadow: var(--box-shadow);\n  border-radius: var(--border-radius);\n  overflow: auto;\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  letter-spacing: -0.1px;\n`;\n\nexport const FormField = styled(TextField)`\n  height: var(--field-height);\n  padding-left: 40px;\n`;\n\nexport const Button = styled(ButtonPrimary)`\n  min-width: 100px;\n  height: 35px;\n`;\n\nexport const PasswordField = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n`;\n\nexport const ShowPassword = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 2px;\n\n  font-size: 12px;\n  line-height: 0;\n  padding-left: 10px;\n  cursor: pointer;\n  user-select: none;\n\n  & input {\n    appearance: unset;\n  }\n`;\n","import { RotatingLines } from 'react-loader-spinner';\n\nexport const SpinnerLines = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n","import { forwardRef } from 'react';\nimport { func, string, number, oneOfType } from 'prop-types';\nimport { IconClose } from 'styles/icons';\n\nimport {\n  ClearBtn,\n  InputWrapper,\n  Input,\n  Field,\n  IconWrapper,\n} from './TextField.styled';\n\nexport const TextField = forwardRef(\n  (\n    { value, icon: ReactIcon, type, onChange, height, width, ...restProps },\n    ref /* !! after props */\n  ) => {\n    return (\n      <Field height={height} width={width}>\n        <InputWrapper>\n          <Input\n            ref={ref}\n            type={type || 'text'}\n            onChange={onChange}\n            value={value}\n            {...restProps}\n          />\n\n          {ReactIcon && (\n            <IconWrapper>\n              {typeof ReactIcon === 'function' ? (\n                <ReactIcon size=\"100%\" />\n              ) : (\n                ReactIcon\n              )}\n            </IconWrapper>\n          )}\n\n          {value && (\n            <ClearBtn type=\"button\" onClick={() => onChange(null)}>\n              <IconClose size=\"100%\" />\n            </ClearBtn>\n          )}\n        </InputWrapper>\n      </Field>\n    );\n  }\n);\n\nTextField.propTypes = {\n  value: string,\n  type: string,\n  onChange: func,\n  width: oneOfType([string, number]),\n  height: oneOfType([string, number]),\n};\n","import styled from '@emotion/styled';\nimport { ButtonBase, FlexCentered, TransitionBase } from 'styles/shared';\n\nexport const Field = styled.label`\n  width: ${({ width }) => width || '100%'};\n  height: ${({ height }) => height || '100%'};\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  height: ${({ height }) => height || '100%'};\n  color: var(--color-text);\n`;\n\nexport const Input = styled.input`\n  height: 100%;\n  width: 100%;\n\n  padding: 0;\n  padding-right: ${({ paddingRight }) => paddingRight || '30px'};\n  padding-left: ${({ paddingLeft }) => paddingLeft || '35px'};\n\n  font-family: inherit;\n  font-size: inherit;\n  background-color: white;\n\n  border-radius: var(--border-radius);\n  border: 1px solid var(--color-border);\n  outline: none;\n\n  ${TransitionBase('box-shadow border-color ackground-colo')};\n\n  &::placeholder {\n    opacity: 0.5;\n    text-transform: capitalize;\n  }\n\n  &:focus-visible {\n    background-color: var(--color-accent-lighter);\n    box-shadow: 0 0 0 0.25rem rgb(var(--color-blue-rgb), 0.2);\n    border-color: rgb(var(--color-blue-rgb), 0.6);\n  }\n`;\n\nexport const ClearBtn = styled(ButtonBase)`\n  position: absolute;\n  top: 50%;\n  right: 5px;\n\n  height: 80%;\n  padding: 3px;\n\n  color: gray;\n  transform: translateY(-50%);\n  transition-property: color;\n\n  &:focus-visible,\n  &:hover {\n    color: var(--color-black);\n  }\n`;\n\nexport const IconWrapper = styled.span`\n  ${FlexCentered()};\n\n  position: absolute;\n  top: 50%;\n  left: 10px;\n  height: 60%;\n\n  color: currentColor;\n  transform: translateY(-50%);\n`;\n","import { IconPhone, IconUser, IconLock } from 'styles/icons';\n\nexport const fieldData = {\n  name: {\n    title:\n      'First and last name(optional) must contain only letters and be at least 2 characters long',\n    pattern:\n      '^\\\\s*[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,}(\\\\s+[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,})?\\\\s*$',\n    icon: IconUser,\n  },\n\n  number: {\n    title: 'Must be 10 digits long and may contain spaces and hyphens',\n    pattern: '^([\\\\s-]*\\\\d[\\\\s-]*){10}$',\n    icon: IconPhone,\n  },\n\n  password: {\n    title: 'Must be at least 7 characters long',\n    pattern: '^.{7,}$',\n    icon: IconLock,\n  },\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Home = () => <LoginForm />;\n\nexport default Home;\n"],"names":["LoginForm","signup","useAuth","loginAsync","signupAsync","pendingAction","useState","name","setName","email","setEmail","password","setPassword","showPassword","setShowPassword","passwordProps","minLength","maxLength","pattern","fieldData","Form","onSubmit","e","preventDefault","formatName","trim","then","user","toast","catch","FormTitle","FormField","placeholder","autoComplete","title","icon","value","onChange","target","required","type","IconMail","size","PasswordField","ShowPassword","onClick","cur","Button","SpinnerLines","width","strokeColor","styled","TextField","ButtonPrimary","restProps","strokeWidth","animationDuration","visible","forwardRef","ref","ReactIcon","height","Field","InputWrapper","Input","IconWrapper","ClearBtn","IconClose","paddingRight","paddingLeft","TransitionBase","ButtonBase","FlexCentered","IconUser","number","IconPhone","IconLock"],"sourceRoot":""}