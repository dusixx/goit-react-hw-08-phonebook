{"version":3,"file":"static/js/910.57ceca54.chunk.js","mappings":"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","sources":["components/ContactEditor/ContactEditor.jsx","components/ContactEditor/ContactEditor.styled.jsx","components/ContactEditor/SubmitBtn.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/Controls/Controls.jsx","components/ContactList/Controls/Controls.styled.jsx","components/ContactList/controlsData.js","components/Filter/Filter.jsx","components/SpinnerLines/SpinnerLines.jsx","components/TextField/TextField.jsx","components/TextField/TextField.styled.jsx","data/fieldData.js","pages/Contacts.jsx","pages/Contacts.styled.jsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport { TextField } from 'components/TextField';\nimport { Form } from './ContactEditor.styled';\nimport { fieldData } from 'data/fieldData';\nimport { useContacts } from 'redux/hooks';\nimport { toast } from 'react-toastify';\nimport { Block } from 'styles/shared';\nimport { useEffect } from 'react';\nimport { SubmitBtn } from './SubmitBtn';\n\nimport {\n  formatNumber,\n  formatName,\n  isContactExists,\n  isContactsEqual,\n} from 'utils';\n\nconst ALREADY_EXISTS = `The contact with the same name or number already exists`;\nconst ADDED_SUCCESS = `The contact was successfully added `;\nconst UPDATED_SUCCESS = `The contact was successfully updated `;\n\n//\n// ContactEditor\n//\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [editedData, setEditedData] = useState(null);\n  const nameFieldRef = useRef(null);\n  const {\n    items,\n    editedId,\n    setEditedId,\n    pendingAction,\n    addContactAsync,\n    editContactAsync,\n  } = useContacts();\n\n  useEffect(() => {\n    return () => {\n      setEditedId(null);\n      setEditedData(null);\n    };\n  }, [setEditedId]);\n\n  useEffect(() => {\n    if (!name && !number) {\n      setEditedId(null);\n      setEditedData(null);\n    }\n  }, [name, number, setEditedId]);\n\n  useEffect(() => {\n    const found = items.find(itm => itm.id === editedId);\n    if (!found) return;\n\n    setEditedData(found);\n    setName(found.name);\n    setNumber(found.number);\n\n    nameFieldRef.current?.focus();\n    nameFieldRef.current?.scrollIntoView();\n  }, [editedId, items, setEditedId]);\n\n  const resetForm = e => {\n    setName('');\n    setNumber('');\n  };\n\n  const addContact = data => {\n    addContactAsync(data).then(() => {\n      resetForm();\n      toast.success(ADDED_SUCCESS);\n    });\n  };\n\n  const editContact = data => {\n    if (isContactsEqual(data, editedData)) return;\n\n    editContactAsync({ id: editedId, data })\n      .then(() => {\n        setEditedId(null);\n        resetForm();\n        toast.success(UPDATED_SUCCESS);\n      })\n      .catch(toast.error);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const data = {\n      name: formatName(name),\n      number: formatNumber(number),\n    };\n\n    if (editedId) return editContact(data);\n\n    // можно вынести в condition для thunk-а addContact\n    if (!isContactExists(items, data)) return addContact(data);\n    toast.error(ALREADY_EXISTS);\n  };\n\n  return (\n    <Block style={{ padding: '15px' }}>\n      <Form onSubmit={handleSubmit}>\n        <TextField\n          ref={nameFieldRef}\n          name=\"name\"\n          placeholder=\"name\"\n          height=\"var(--field-height)\"\n          autoComplete=\"off\"\n          pattern={fieldData.name.pattern}\n          title={fieldData.name.title}\n          icon={fieldData.name.icon}\n          value={name}\n          onChange={e => setName(e?.target.value ?? '')}\n          required\n        />\n\n        <TextField\n          name=\"number\"\n          placeholder=\"number\"\n          height=\"var(--field-height)\"\n          type=\"tel\"\n          autoComplete=\"off\"\n          pattern={fieldData.number.pattern}\n          title={fieldData.number.title}\n          icon={fieldData.number.icon}\n          value={number}\n          onChange={e => setNumber(e?.target.value ?? '')}\n          required\n        />\n\n        <SubmitBtn\n          loading={/(add|edit)/i.test(pendingAction)}\n          adding={!editedId}\n        />\n      </Form>\n    </Block>\n  );\n};\n","import styled from '@emotion/styled';\nimport { ButtonPrimary } from 'styles/shared';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const Button = styled(ButtonPrimary)`\n  margin: 0 auto 0 auto;\n  padding: 0;\n  min-width: 80px;\n  height: 35px;\n`;\n","import { bool } from 'prop-types';\nimport { Button } from './ContactEditor.styled';\nimport { SpinnerLines } from 'components/SpinnerLines/SpinnerLines';\nimport { IconUserPlus } from 'styles/icons';\n\nexport const SubmitBtn = ({ loading = false, adding = true }) => {\n  const btnCaption = !adding ? (\n    'Save'\n  ) : (\n    <>\n      <IconUserPlus size=\"20px\" />\n      Add\n    </>\n  );\n\n  return (\n    <Button type=\"submit\">\n      {loading ? <SpinnerLines width={20} strokeColor=\"white\" /> : btnCaption}\n    </Button>\n  );\n};\n\nSubmitBtn.propTypes = {\n  loading: bool,\n  adding: bool,\n};\n","import { useContacts } from 'redux/hooks';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { string, oneOfType, number } from 'prop-types';\nimport { Block } from 'styles/shared';\nimport { Controls } from './Controls/Controls';\nimport { controlsData } from './controlsData';\nimport { List, Item, Column } from './ContactList.styled';\nimport { Processing } from './ContactList.styled';\nimport { SpinnerLines } from 'components/SpinnerLines/SpinnerLines';\n\nconst ACTION_NOT_SUPPORTED = 'Action not supported';\n\n// const deletedItemStyle = {\n//   backgroundColor: 'rgb(255 0 0 / 0.1)',\n// };\n\n//\n// ContactList\n//\n\nexport const ContactList = ({ controlsHeight, rowHeight }) => {\n  const [clickedId, setClickedId] = useState(null);\n  const { filtered, deleteContactAsync, pendingAction, setEditedId, editedId } =\n    useContacts();\n\n  const handleControlClick = (id, name) => {\n    setClickedId(id);\n\n    switch (name) {\n      case 'delete':\n        return deleteContactAsync(id).finally(() => setClickedId(null));\n      case 'edit':\n        return setEditedId(id);\n      default:\n        toast.warn(ACTION_NOT_SUPPORTED);\n    }\n  };\n\n  if (!filtered.length) return null;\n\n  return (\n    <Block maxHeight=\"70vh\">\n      <List>\n        {filtered.map(({ id, name, number }) => {\n          const isDeleted = /delete/i.test(pendingAction) && clickedId === id;\n\n          return (\n            <Item\n              key={id}\n              height={rowHeight}\n              // style={isDeleted ? deletedItemStyle : null}\n            >\n              <Column>{name}</Column>\n              <Column>{number}</Column>\n              <Column>\n                {isDeleted ? (\n                  <Processing>\n                    <SpinnerLines width={20} />\n                    Deleting...\n                  </Processing>\n                ) : (\n                  <Controls\n                    items={controlsData}\n                    height={controlsHeight}\n                    targetId={id}\n                    onClick={handleControlClick}\n                    style={\n                      id === editedId\n                        ? { pointerEvents: 'none', opacity: 0.7 }\n                        : null\n                    }\n                  />\n                )}\n              </Column>\n            </Item>\n          );\n        })}\n      </List>\n    </Block>\n  );\n};\n\nContactList.propTypes = {\n  rowHeight: oneOfType([string, number]),\n};\n","import styled from '@emotion/styled';\nimport { FlexCentered } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const List = styled.ul`\n  @media screen and (max-width: 400px) {\n    font-size: 12px;\n  }\n\n  & > li:nth-of-type(odd) {\n    background-color: #f0f0f0;\n  }\n`;\n\nexport const Item = styled.li`\n  ${FlexCentered('justify-content: space-between')};\n  height: ${({ height }) => calcCSSValue(height)};\n  padding-left: 10px;\n`;\n\nexport const Column = styled.span`\n  ${FlexCentered()};\n  flex-basis: 33.33%;\n  height: 100%;\n  text-align: center;\n`;\n\nexport const Processing = styled.div`\n  ${FlexCentered('gap: 4px')};\n  height: 100%;\n  font-size: 11px;\n  color: rgb(0 0 0 / 0.8);\n  user-select: none;\n\n  @media screen and (min-width: 360px) {\n    font-size: 12px;\n  }\n`;\n","import { string, number, objectOf, oneOfType, func } from 'prop-types';\nimport { ControlsList, Control, ControlBtn } from './Controls.styled';\nimport { cap } from 'utils';\n\n//\n// Controls\n//\n\nexport const Controls = ({ items, targetId, height, onClick, style }) => {\n  return (\n    <ControlsList height={height} style={style}>\n      {Object.entries(items).map(([name, Icon]) => {\n        return (\n          <Control key={name}>\n            <ControlBtn\n              type=\"button\"\n              title={cap(name)}\n              onClick={() => onClick(targetId, name.toLocaleLowerCase())}\n            >\n              <Icon size=\"100%\" />\n            </ControlBtn>\n          </Control>\n        );\n      })}\n    </ControlsList>\n  );\n};\n\nControls.propTypes = {\n  onClick: func,\n  items: objectOf(func),\n  targetId: string,\n  height: oneOfType([string, number]),\n};\n","import styled from '@emotion/styled';\nimport { ButtonBase, FlexCentered } from 'styles/shared';\nimport { calcCSSValue } from 'utils';\n\nexport const ControlsList = styled.ul`\n  ${FlexCentered('gap: 5px')};\n  height: ${({ height }) => calcCSSValue(height) || '100%'};\n  width: 100%;\n  user-select: none;\n`;\n\nexport const Control = styled.li`\n  height: 100%;\n`;\n\nexport const ControlBtn = styled(ButtonBase)`\n  height: 100%;\n  color: #c5c5c5;\n\n  &:hover,\n  &:focus-visible {\n    color: var(--color-accent);\n  }\n`;\n","import { IconDelete, IconEdit } from 'styles/icons';\n\nexport const controlsData = {\n  edit: IconEdit,\n  delete: IconDelete,\n};\n","import { IconFilter } from 'styles/icons';\nimport { TextField } from 'components/TextField';\nimport { useFilter } from 'redux/hooks';\nimport { Block } from 'styles/shared';\n\nexport const Filter = () => {\n  const { filter, update } = useFilter();\n\n  return (\n    <Block style={{ padding: '10px' }}>\n      <TextField\n        icon={IconFilter}\n        height=\"var(--field-height)\"\n        name=\"filter\"\n        placeholder=\"Filter\"\n        autoComplete=\"off\"\n        onChange={e => update(e?.target.value ?? '')}\n        value={filter}\n      />\n    </Block>\n  );\n};\n","import { RotatingLines } from 'react-loader-spinner';\n\nexport const SpinnerLines = ({ width = 40, ...restProps }) => (\n  <RotatingLines\n    strokeColor=\"black\"\n    strokeWidth=\"3\"\n    animationDuration=\"0.75\"\n    width={width}\n    visible={true}\n    {...restProps}\n  />\n);\n","import { forwardRef } from 'react';\nimport { func, string, number, oneOfType } from 'prop-types';\nimport { IconClose } from 'styles/icons';\n\nimport {\n  ClearBtn,\n  InputWrapper,\n  Input,\n  Field,\n  IconWrapper,\n} from './TextField.styled';\n\nexport const TextField = forwardRef(\n  (\n    { value, icon: ReactIcon, type, onChange, height, width, ...restProps },\n    ref /* !! after props */\n  ) => {\n    return (\n      <Field height={height} width={width}>\n        <InputWrapper>\n          <Input\n            ref={ref}\n            type={type || 'text'}\n            onChange={onChange}\n            value={value}\n            {...restProps}\n          />\n\n          {ReactIcon && (\n            <IconWrapper>\n              {typeof ReactIcon === 'function' ? (\n                <ReactIcon size=\"100%\" />\n              ) : (\n                ReactIcon\n              )}\n            </IconWrapper>\n          )}\n\n          {value && (\n            <ClearBtn type=\"button\" onClick={() => onChange(null)}>\n              <IconClose size=\"100%\" />\n            </ClearBtn>\n          )}\n        </InputWrapper>\n      </Field>\n    );\n  }\n);\n\nTextField.propTypes = {\n  value: string,\n  type: string,\n  onChange: func,\n  width: oneOfType([string, number]),\n  height: oneOfType([string, number]),\n};\n","import styled from '@emotion/styled';\nimport { ButtonBase, FlexCentered, TransitionBase } from 'styles/shared';\n\nexport const Field = styled.label`\n  width: ${({ width }) => width || '100%'};\n  height: ${({ height }) => height || '100%'};\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  height: ${({ height }) => height || '100%'};\n  color: var(--color-text);\n`;\n\nexport const Input = styled.input`\n  height: 100%;\n  width: 100%;\n\n  padding: 0;\n  padding-right: ${({ paddingRight }) => paddingRight || '30px'};\n  padding-left: ${({ paddingLeft }) => paddingLeft || '35px'};\n\n  font-family: inherit;\n  font-size: inherit;\n  background-color: white;\n\n  border-radius: var(--border-radius);\n  border: 1px solid var(--color-border);\n  outline: none;\n\n  ${TransitionBase('box-shadow border-color ackground-colo')};\n\n  &::placeholder {\n    opacity: 0.5;\n    text-transform: capitalize;\n  }\n\n  &:focus-visible {\n    background-color: var(--color-accent-lighter);\n    box-shadow: 0 0 0 0.25rem rgb(var(--color-blue-rgb), 0.2);\n    border-color: rgb(var(--color-blue-rgb), 0.6);\n  }\n`;\n\nexport const ClearBtn = styled(ButtonBase)`\n  position: absolute;\n  top: 50%;\n  right: 5px;\n\n  height: 80%;\n  padding: 3px;\n\n  color: gray;\n  transform: translateY(-50%);\n  transition-property: color;\n\n  &:focus-visible,\n  &:hover {\n    color: var(--color-black);\n  }\n`;\n\nexport const IconWrapper = styled.span`\n  ${FlexCentered()};\n\n  position: absolute;\n  top: 50%;\n  left: 10px;\n  height: 60%;\n\n  color: currentColor;\n  transform: translateY(-50%);\n`;\n","import { IconPhone, IconUser, IconLock } from 'styles/icons';\n\nexport const fieldData = {\n  name: {\n    title:\n      'First and last name(optional) must contain only letters and be at least 2 characters long',\n    pattern:\n      '^\\\\s*[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,}(\\\\s+[A-ZА-Я\\\\u0406ЇЄa-zа-яіїє]{2,})?\\\\s*$',\n    icon: IconUser,\n  },\n\n  number: {\n    title: 'Must be 10 digits long and may contain spaces and hyphens',\n    pattern: '^([\\\\s-]*\\\\d[\\\\s-]*){10}$',\n    icon: IconPhone,\n  },\n\n  password: {\n    title: 'Must be at least 7 characters long',\n    pattern: '^.{7,}$',\n    icon: IconLock,\n  },\n};\n","import { toast } from 'react-toastify';\nimport { Container, Title } from './Contacts.styled';\nimport { ContactEditor } from 'components/ContactEditor';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { SpinnerLines } from 'components/SpinnerLines/SpinnerLines';\nimport { useFetchedContacts } from 'hooks/useFetchedContacts';\n\nconst NO_CONTACTS = 'There are no contacts in the phone book yet';\nconst Error = ({ message }) => void toast.error(message);\n\n//\n// Contacts\n//\n\nconst Contacts = () => {\n  const { items, pendingAction, error } = useFetchedContacts();\n\n  return (\n    <Container>\n      <Error message={error} />\n      <Title>Your contacts</Title>\n      <ContactEditor />\n\n      {items.length > 0 && (\n        <>\n          <Filter />\n          <ContactList rowHeight={40} controlsHeight=\"60%\" />\n        </>\n      )}\n\n      {items.length === 0 &&\n        (/fetchAll/i.test(pendingAction) ? <SpinnerLines /> : NO_CONTACTS)}\n    </Container>\n  );\n};\n\nexport default Contacts;\n","import styled from '@emotion/styled';\nimport { calcCSSValue } from 'utils';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n\n  margin: 0 auto 0 auto;\n  padding: 10px;\n\n  width: ${({ width }) => calcCSSValue(width) || '100%'};\n  min-width: 250px;\n\n  @media screen and (min-width: 1200px) {\n    width: 70%;\n  }\n`;\n\nexport const Title = styled.h2`\n  letter-spacing: -0.1px;\n`;\n"],"names":["ContactEditor","useState","name","setName","number","setNumber","editedData","setEditedData","nameFieldRef","useRef","useContacts","items","editedId","setEditedId","pendingAction","addContactAsync","editContactAsync","useEffect","found","find","itm","id","current","focus","scrollIntoView","resetForm","e","Block","style","padding","Form","onSubmit","preventDefault","data","formatName","formatNumber","isContactsEqual","then","toast","catch","editContact","isContactExists","addContact","TextField","ref","placeholder","height","autoComplete","pattern","fieldData","title","icon","value","onChange","target","required","type","SubmitBtn","loading","test","adding","styled","Button","ButtonPrimary","btnCaption","IconUserPlus","size","SpinnerLines","width","strokeColor","ContactList","controlsHeight","rowHeight","clickedId","setClickedId","filtered","deleteContactAsync","handleControlClick","finally","length","maxHeight","List","map","isDeleted","Item","Column","Processing","Controls","controlsData","targetId","onClick","pointerEvents","opacity","FlexCentered","calcCSSValue","ControlsList","Object","entries","Icon","Control","ControlBtn","cap","toLocaleLowerCase","ButtonBase","edit","IconEdit","delete","IconDelete","Filter","useFilter","filter","update","IconFilter","restProps","strokeWidth","animationDuration","visible","forwardRef","ReactIcon","Field","InputWrapper","Input","IconWrapper","ClearBtn","IconClose","paddingRight","paddingLeft","TransitionBase","IconUser","IconPhone","password","IconLock","Error","message","useFetchedContacts","error","Container","Title"],"sourceRoot":""}